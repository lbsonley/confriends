{"version":3,"sources":["../server/server.js"],"names":["jwt","require","jwks","cors","path","logger","config","app","db","connect","then","connection","listen","catch","err","use","json","urlencoded","extended","static","join","__dirname","authCheck","secret","expressJwtSecret","cache","rateLimit","jwksRequestsPerMinute","jwksUri","process","env","AUTH0_DOMAIN","audience","AUTH0_AUDIENCE","issuer","algorithms","getMongoId","idString","res","error","status","message","put","req","eventId","params","id","collection","collectionName","update","_id","$push","attendees","name","body","procurementLink","approved","find","limit","next","savedEvent","get","findOne","event","matchingAttendee","filter","attendee","userId","toArray","events","send","sendFile"],"mappings":"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","file":"server.js","sourcesContent":["import 'babel-polyfill';\nimport express from 'express';\nimport bodyParser from 'body-parser';\nimport { MongoClient, ObjectId } from 'mongodb';\n\nconst jwt = require('express-jwt');\nconst jwks = require('jwks-rsa');\nconst cors = require('cors');\nconst path = require('path');\nconst logger = require('debug')('expressServer');\nrequire('dotenv').config();\n\nconst app = express();\nlet db;\n\nMongoClient.connect('mongodb://localhost/events')\n  .then(connection => {\n    db = connection;\n    app.listen(3001, () => logger('running on port 3001'));\n  })\n  .catch(err => logger('ERROR:', err));\n\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: true }));\napp.use(cors());\n\n// Serve static files from the React app\napp.use(express.static(path.join(__dirname, '../client/build')));\n\n// eslint-disable-next-line no-unused-vars\nconst authCheck = jwt({\n  secret: jwks.expressJwtSecret({\n    cache: true,\n    rateLimit: true,\n    jwksRequestsPerMinute: 5,\n    // YOUR-AUTH0-DOMAIN name e.g prosper.auth0.com\n    jwksUri: `https://${process.env.AUTH0_DOMAIN}/.well-known/jwks.json`,\n  }),\n  // This is the identifier we set when we created the API\n  audience: `https://${process.env.AUTH0_AUDIENCE}`,\n  issuer: `https://${process.env.AUTH0_DOMAIN}/`,\n  algorithms: ['RS256'],\n});\n\n// helper function\n\nconst getMongoId = (idString, res) => {\n  // convert the id string to a MongoDB ObjectId\n  try {\n    return ObjectId(idString);\n  } catch (error) {\n    res.status(422).json({ message: `Invalid issue ID format: ${error}` });\n  }\n};\n\n// ** Create API **\n\n/**\n * updating a record\n */\napp.put('/api/:collectionName/:id', (req, res) => {\n  const eventId = getMongoId(req.params.id, res);\n\n  db.collection(req.params.collectionName).update(\n    { _id: eventId },\n    {\n      $push: {\n        attendees: {\n          name: req.body.name,\n          id: req.body.id,\n          procurementLink: req.body.procurementLink,\n          approved: req.body.approved,\n        },\n      },\n    },\n    () => {\n      db\n        .collection(req.params.collectionName)\n        .find({ _id: eventId })\n        .limit(1)\n        .next()\n        .then(savedEvent => {\n          logger(savedEvent);\n          res.json(savedEvent);\n        })\n        .catch(err => {\n          logger('error', err);\n          res.status.json({ message: `Error: ${err}` });\n        });\n    }\n  );\n});\n\n// ** Read API **\n\n/**\n * endpoint for edit event attendee page\n */\napp.get('/api/:collectionName/:id/edit/:userId', (req, res) => {\n  const eventId = getMongoId(req.params.id, res);\n  db\n    .collection(req.params.collectionName)\n    // find the matching event and return it's attendees array\n    .findOne({ _id: eventId }, { attendees: 1 })\n    .then(event => {\n      // filter the attendees array for the attendee to be edited\n      const matchingAttendee = event.attendees.filter(\n        attendee => attendee.id === req.params.userId,\n      );\n      logger('sending', matchingAttendee);\n      res.json({ attendee: matchingAttendee[0] });\n    });\n});\n\n/**\n * endpoint for event detail page\n */\napp.get('/api/:collectionName/:id', (req, res) => {\n  const eventId = getMongoId(req.params.id, res);\n\n  db\n    .collection(req.params.collectionName)\n    .find({ _id: eventId })\n    .limit(1)\n    .next()\n    .then(event => {\n      res.json({ event });\n    });\n});\n\n/**\n * endpoint for a list of events\n */\napp.get('/api/:collectionName', (req, res) => {\n  db\n    .collection(req.params.collectionName)\n    .find()\n    .toArray()\n    .then(events => {\n      res.json({ events });\n    });\n});\n\napp.get('/api', (req, res) => {\n  res.send('Using the confriends REST API');\n});\n\n// The \"catchall\" handler: for any request that doesn't\n// match one above, send back React's index.html file.\napp.get('*', (req, res) => {\n  res.sendFile(path.join(`${__dirname}../client/build/index.html`));\n});\n"]}