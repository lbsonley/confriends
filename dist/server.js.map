{"version":3,"sources":["../server/server.js"],"names":["jwt","require","jwks","cors","path","logger","config","app","db","connect","then","connection","listen","catch","err","use","json","urlencoded","extended","static","join","__dirname","authCheck","secret","expressJwtSecret","cache","rateLimit","jwksRequestsPerMinute","jwksUri","process","env","AUTH0_DOMAIN","audience","AUTH0_AUDIENCE","issuer","algorithms","getMongoId","idString","res","error","status","message","deleteConferenceAttendees","req","collection","params","collectionName","deleteMany","eventId","attendees","deleteConference","deleteOne","_id","event","getEventAttendees","find","id","toArray","getOneEvent","limit","next","delete","userId","findOneAndDelete","put","body","updateOne","$set","name","procurementLink","approved","result","findOne","attendee","website","date","city","country","description","upsert","responseEvent","responseAttendee","get","events","send","sendFile"],"mappings":"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","file":"server.js","sourcesContent":["import 'babel-polyfill';\nimport express from 'express';\nimport bodyParser from 'body-parser';\nimport { MongoClient, ObjectId } from 'mongodb';\n\nconst jwt = require('express-jwt');\nconst jwks = require('jwks-rsa');\nconst cors = require('cors');\nconst path = require('path');\nconst logger = require('debug')('expressServer');\nrequire('dotenv').config();\n\nconst app = express();\nlet db;\n\nMongoClient.connect('mongodb://localhost/confriends')\n  .then(connection => {\n    db = connection;\n    app.listen(3001, () => logger('running on port 3001'));\n  })\n  .catch(err => logger('ERROR:', err));\n\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: true }));\napp.use(cors());\n\n// Serve static files from the React app\napp.use(express.static(path.join(__dirname, '../client/build')));\n\n// eslint-disable-next-line no-unused-vars\nconst authCheck = jwt({\n  secret: jwks.expressJwtSecret({\n    cache: true,\n    rateLimit: true,\n    jwksRequestsPerMinute: 5,\n    // YOUR-AUTH0-DOMAIN name e.g prosper.auth0.com\n    jwksUri: `https://${process.env.AUTH0_DOMAIN}/.well-known/jwks.json`,\n  }),\n  // This is the identifier we set when we created the API\n  audience: `https://${process.env.AUTH0_AUDIENCE}`,\n  issuer: `https://${process.env.AUTH0_DOMAIN}/`,\n  algorithms: ['RS256'],\n});\n\n// helper function\n\nconst getMongoId = (idString, res) => {\n  // convert the id string to a MongoDB ObjectId\n  try {\n    return ObjectId(idString);\n  } catch (error) {\n    res.status(422).json({ message: `Invalid issue ID format: ${error}` });\n  }\n};\n\nconst deleteConferenceAttendees = (req, res) => {\n  db\n    .collection(req.params.collectionName)\n    .deleteMany({ eventId: req.params.eventId })\n    .then(attendees => {\n      logger('deleteConferenceAttendees');\n      res.json({ attendees });\n    });\n};\n\nconst deleteConference = (req, res) => {\n  const eventId = getMongoId(req.params.eventId);\n\n  db\n    .collection(req.params.collectionName)\n    .deleteOne({ _id: eventId })\n    .then(event => {\n      logger('deleteConference');\n      res.json({ event });\n    });\n};\n\nconst getEventAttendees = (req, res) => {\n  const { params } = req;\n\n  db\n    .collection('attendees')\n    .find({\n      eventId: params.id,\n    })\n    .toArray()\n    .then(attendees => {\n      logger('getEventAttendees response', attendees);\n      res.json({ attendees });\n    });\n};\n\nconst getOneEvent = (req, res) => {\n  const { params } = req;\n\n  const eventId = getMongoId(params.id, res);\n\n  db\n    .collection(params.collectionName)\n    .find({ _id: eventId })\n    .limit(1)\n    .next()\n    .then(event => {\n      logger('getOneEvent response', event);\n      res.json({ event });\n    });\n};\n\n/**\n * Delete API\n */\n\n// delete an attendee\napp.delete('/api/:collectionName/:eventId/:userId', (req, res) => {\n  const { eventId, userId } = req.params;\n  db\n    .collection(req.params.collectionName)\n    .findOneAndDelete({ eventId, userId }, err => {\n      db\n        .collection(req.params.collectionName)\n        .find({ eventId })\n        .toArray()\n        .then(attendees => {\n          logger('attendees after delete', attendees);\n          res.json({ attendees });\n        });\n    });\n});\n\n// delete a conference\napp.delete('/api/:collectionName/:eventId', (req, res) => {\n  if (req.params.collectionName === 'attendees') {\n    deleteConferenceAttendees(req, res);\n  } else if (req.params.collectionName === 'conferences') {\n    deleteConference(req, res);\n  }\n});\n\n/**\n * Create API\n */\n\n// updating an event's attendee with new approval info\napp.put('/api/:collectionName/:eventId/:userId', (req, res) => {\n  logger('body', req.body);\n  db.collection(req.params.collectionName).updateOne(\n    { eventId: req.params.eventId, userId: req.body.userId },\n    {\n      $set: {\n        eventId: req.body.eventId,\n        userId: req.body.userId,\n        name: req.body.name,\n        procurementLink: req.body.procurementLink,\n        approved: req.body.approved,\n      },\n    },\n    result => {\n      db\n        .collection(req.params.collectionName)\n        .findOne({ eventId: req.params.eventId, userId: req.body.userId })\n        .then(attendee => {\n          logger('updatedAttendee: ', attendee);\n          res.json(attendee);\n        });\n    }\n  );\n});\n\n// adding event to collection\napp.put('/api/:collectionName', (req, res) => {\n  logger('body', req.body);\n  const { name, website, date, city, country, description } = req.body;\n  db.collection(req.params.collectionName).updateOne(\n    {\n      website,\n    },\n    {\n      name,\n      website,\n      date,\n      city,\n      country,\n      description,\n    },\n    { upsert: true },\n    err => {\n      db\n        .collection(req.params.collectionName)\n        .findOne({ website })\n        .then(responseEvent => {\n          logger('response', responseEvent);\n          res.json(responseEvent);\n        });\n    }\n  );\n});\n\n// updating attendee collection\napp.put('/api/:collectionName/:id', (req, res) => {\n  logger('body', req.body);\n  db.collection(req.params.collectionName).updateOne(\n    {\n      eventId: req.body.eventId,\n      userId: req.body.userId,\n    },\n    {\n      eventId: req.body.eventId,\n      userId: req.body.userId,\n      name: req.body.name,\n      procurementLink: req.body.procurementLink,\n      approved: req.body.approved,\n    },\n    { upsert: true },\n    err => {\n      db\n        .collection(req.params.collectionName)\n        .findOne({ eventId: req.body.eventId, userId: req.body.userId })\n        .then(responseAttendee => {\n          logger('response', responseAttendee);\n          res.json(responseAttendee);\n        });\n    }\n  );\n});\n\n/**\n * Read API\n */\n\n// endpoint for edit attendee page\n// each event attendee has a unique\n// entry in the database so we have to\n// filter on eventId and userId\napp.get('/api/:collectionName/:eventId/:userId', (req, res) => {\n  db\n    .collection(req.params.collectionName)\n    // find the attendee to edit\n    .findOne({ eventId: req.params.eventId, userId: req.params.userId })\n    .then(attendee => {\n      logger('sending', attendee);\n      res.json({ attendee });\n    });\n});\n\n// endpoint for event detail page\napp.get('/api/:collectionName/:id', (req, res) => {\n  if (req.params.collectionName === 'conferences') {\n    getOneEvent(req, res);\n  } else if (req.params.collectionName === 'attendees') {\n    getEventAttendees(req, res);\n  }\n});\n\n// endpoint for a list of events\napp.get('/api/:collectionName', (req, res) => {\n  db\n    .collection(req.params.collectionName)\n    .find()\n    .toArray()\n    .then(events => {\n      res.json({ events });\n    });\n});\n\napp.get('/api', (req, res) => {\n  res.send('Using the confriends REST API');\n});\n\n// The \"catchall\" handler: for any request that doesn't\n// match one above, send back React's index.html file.\napp.get('*', (req, res) => {\n  res.sendFile(path.join(`${__dirname}../client/build/index.html`));\n});\n"]}