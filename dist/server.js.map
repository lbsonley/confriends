{"version":3,"sources":["../server/server.js"],"names":["jwt","require","jwks","cors","path","logger","config","app","db","port","process","env","PORT","mongoUri","PROD","MLAB_URI","connect","then","connection","listen","catch","err","use","json","urlencoded","extended","static","join","__dirname","authCheck","secret","expressJwtSecret","cache","rateLimit","jwksRequestsPerMinute","jwksUri","AUTH0_DOMAIN","audience","AUTH0_AUDIENCE","issuer","algorithms","getMongoId","idString","res","error","status","message","deleteConferenceAttendees","req","collection","params","collectionName","deleteMany","eventId","attendees","deleteConference","deleteOne","_id","event","getEventAttendees","find","toArray","getOneEvent","limit","next","delete","userId","findOneAndDelete","put","body","updateOne","$set","name","procurementLink","approved","findOne","attendee","website","date","city","country","description","upsert","responseEvent","responseAttendee","get","events","send","sendFile"],"mappings":";;AAAA;;AACA;;;;AACA;;;;AACA;;;;AAEA,MAAMA,MAAMC,QAAQ,aAAR,CAAZ;AACA,MAAMC,OAAOD,QAAQ,UAAR,CAAb;AACA,MAAME,OAAOF,QAAQ,MAAR,CAAb;AACA,MAAMG,OAAOH,QAAQ,MAAR,CAAb;AACA,MAAMI,SAASJ,QAAQ,OAAR,EAAiB,eAAjB,CAAf;AACAA,QAAQ,QAAR,EAAkBK,MAAlB;;AAEA,MAAMC,MAAM,wBAAZ;AACA,IAAIC,EAAJ;AACA,MAAMC,OAAOC,QAAQC,GAAR,CAAYC,IAAZ,IAAoB,IAAjC;;AAEA,MAAMC,WAAWH,QAAQC,GAAR,CAAYG,IAAZ,GACbJ,QAAQC,GAAR,CAAYI,QADC,GAEb,gCAFJ;;AAIAV,OAAO,8BAAP,EAAuCQ,QAAvC;AACA,qBAAYG,OAAZ,CAAoBH,QAApB,EACGI,IADH,CACQC,cAAc;AAClBV,OAAKU,WAAWV,EAAX,CAAc,YAAd,CAAL;AACAD,MAAIY,MAAJ,CAAWV,IAAX,EAAiB,MAAMJ,OAAQ,mBAAkBI,IAAK,EAA/B,CAAvB;AACD,CAJH,EAKGW,KALH,CAKSC,OAAOhB,OAAO,yBAAP,EAAkCgB,GAAlC,CALhB;;AAOAd,IAAIe,GAAJ,CAAQ,qBAAWC,IAAX,EAAR;AACAhB,IAAIe,GAAJ,CAAQ,qBAAWE,UAAX,CAAsB,EAAEC,UAAU,IAAZ,EAAtB,CAAR;AACAlB,IAAIe,GAAJ,CAAQnB,MAAR;;AAEA;AACAI,IAAIe,GAAJ,CAAQ,kBAAQI,MAAR,CAAetB,KAAKuB,IAAL,CAAUC,SAAV,EAAqB,IAArB,EAA2B,OAA3B,CAAf,CAAR;;AAEA;AACA,MAAMC,YAAY7B,IAAI;AACpB8B,UAAQ5B,KAAK6B,gBAAL,CAAsB;AAC5BC,WAAO,IADqB;AAE5BC,eAAW,IAFiB;AAG5BC,2BAAuB,CAHK;AAI5B;AACAC,aAAU,WAAUzB,QAAQC,GAAR,CAAYyB,YAAa;AALjB,GAAtB,CADY;AAQpB;AACAC,YAAW,WAAU3B,QAAQC,GAAR,CAAY2B,cAAe,EAT5B;AAUpBC,UAAS,WAAU7B,QAAQC,GAAR,CAAYyB,YAAa,GAVxB;AAWpBI,cAAY,CAAC,OAAD;AAXQ,CAAJ,CAAlB;;AAcA;;AAEA,MAAMC,aAAa,CAACC,QAAD,EAAWC,GAAX,KAAmB;AACpC;AACA,MAAI;AACF,WAAO,uBAASD,QAAT,CAAP;AACD,GAFD,CAEE,OAAOE,KAAP,EAAc;AACdD,QAAIE,MAAJ,CAAW,GAAX,EAAgBtB,IAAhB,CAAqB,EAAEuB,SAAU,4BAA2BF,KAAM,EAA7C,EAArB;AACD;AACF,CAPD;;AASA,MAAMG,4BAA4B,CAACC,GAAD,EAAML,GAAN,KAAc;AAC9CnC,KACGyC,UADH,CACcD,IAAIE,MAAJ,CAAWC,cADzB,EAEGC,UAFH,CAEc,EAAEC,SAASL,IAAIE,MAAJ,CAAWG,OAAtB,EAFd,EAGGpC,IAHH,CAGQqC,aAAa;AACjBjD,WAAO,2BAAP;AACAsC,QAAIpB,IAAJ,CAAS,EAAE+B,SAAF,EAAT;AACD,GANH,EAOGlC,KAPH,CAOSC,OAAO;AACZhB,WAAO,uCAAP,EAAgDgB,GAAhD;AACAsB,QAAIpB,IAAJ,CAAS,EAAEuB,SAAU,0CAAyCzB,GAAI,EAAzD,EAAT;AACD,GAVH;AAWD,CAZD;;AAcA,MAAMkC,mBAAmB,CAACP,GAAD,EAAML,GAAN,KAAc;AACrC,QAAMU,UAAUZ,WAAWO,IAAIE,MAAJ,CAAWG,OAAtB,CAAhB;;AAEA7C,KACGyC,UADH,CACcD,IAAIE,MAAJ,CAAWC,cADzB,EAEGK,SAFH,CAEa,EAAEC,KAAKJ,OAAP,EAFb,EAGGpC,IAHH,CAGQyC,SAAS;AACbrD,WAAO,kBAAP;AACAsC,QAAIpB,IAAJ,CAAS,EAAEmC,KAAF,EAAT;AACD,GANH,EAOGtC,KAPH,CAOSC,OAAO;AACZhB,WAAO,6BAAP,EAAsCgB,GAAtC;AACAsB,QAAIpB,IAAJ,CAAS,EAAEuB,SAAU,gCAA+BzB,GAAI,EAA/C,EAAT;AACD,GAVH;AAWD,CAdD;;AAgBA,MAAMsC,oBAAoB,CAACX,GAAD,EAAML,GAAN,KAAc;AACtC,QAAM,EAAEO,MAAF,KAAaF,GAAnB;;AAEAxC,KACGyC,UADH,CACc,WADd,EAEGW,IAFH,CAEQ;AACJP,aAASH,OAAOG;AADZ,GAFR,EAKGQ,OALH,GAMG5C,IANH,CAMQqC,aAAa;AACjBjD,WAAO,8BAAP,EAAuCiD,SAAvC;AACAX,QAAIpB,IAAJ,CAAS,EAAE+B,SAAF,EAAT;AACD,GATH,EAUGlC,KAVH,CAUSC,OAAO;AACZhB,WAAO,iCAAP,EAA0CgB,GAA1C;AACAsB,QAAIpB,IAAJ,CAAS,EAAEuB,SAAU,kCAAiCzB,GAAI,EAAjD,EAAT;AACD,GAbH;AAcD,CAjBD;;AAmBA,MAAMyC,cAAc,CAACd,GAAD,EAAML,GAAN,KAAc;AAChC,QAAM,EAAEO,MAAF,KAAaF,GAAnB;;AAEA,QAAMK,UAAUZ,WAAWS,OAAOG,OAAlB,EAA2BV,GAA3B,CAAhB;;AAEAnC,KACGyC,UADH,CACcC,OAAOC,cADrB,EAEGS,IAFH,CAEQ,EAAEH,KAAKJ,OAAP,EAFR,EAGGU,KAHH,CAGS,CAHT,EAIGC,IAJH,GAKG/C,IALH,CAKQyC,SAAS;AACbrD,WAAO,sBAAP,EAA+BqD,KAA/B;AACAf,QAAIpB,IAAJ,CAAS,EAAEmC,KAAF,EAAT;AACD,GARH,EASGtC,KATH,CASSC,OAAO;AACZhB,WAAO,uBAAP,EAAgCgB,GAAhC;AACAsB,QAAIpB,IAAJ,CAAS,EAAEuB,SAAU,wBAAuBzB,GAAI,EAAvC,EAAT;AACD,GAZH;AAaD,CAlBD;;AAoBA;;;;AAIA;AACAd,IAAI0D,MAAJ,CAAW,uCAAX,EAAoD,CAACjB,GAAD,EAAML,GAAN,KAAc;AAChE,QAAM,EAAEU,OAAF,EAAWa,MAAX,KAAsBlB,IAAIE,MAAhC;AACA1C,KACGyC,UADH,CACcD,IAAIE,MAAJ,CAAWC,cADzB,EAEGgB,gBAFH,CAEoB,EAAEd,OAAF,EAAWa,MAAX,EAFpB,EAEyC7C,OAAO;AAC5C,QAAIA,GAAJ,EAAS;AACPhB,aAAO,2BAAP,EAAoCgB,GAApC;AACAsB,UAAIpB,IAAJ,CAAS,EAAEuB,SAAU,8BAA6BzB,GAAI,EAA7C,EAAT;AACA;AACD;AACDsC,sBAAkBX,GAAlB,EAAuBL,GAAvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,GAvBH;AAwBD,CA1BD;;AA4BA;AACApC,IAAI0D,MAAJ,CAAW,+BAAX,EAA4C,CAACjB,GAAD,EAAML,GAAN,KAAc;AACxD,MAAIK,IAAIE,MAAJ,CAAWC,cAAX,KAA8B,WAAlC,EAA+C;AAC7CJ,8BAA0BC,GAA1B,EAA+BL,GAA/B;AACD,GAFD,MAEO,IAAIK,IAAIE,MAAJ,CAAWC,cAAX,KAA8B,aAAlC,EAAiD;AACtDI,qBAAiBP,GAAjB,EAAsBL,GAAtB;AACD;AACF,CAND;;AAQA;;;;AAIA;AACApC,IAAI6D,GAAJ,CAAQ,uCAAR,EAAiD,CAACpB,GAAD,EAAML,GAAN,KAAc;AAC7DtC,SAAO,MAAP,EAAe2C,IAAIqB,IAAnB;AACA7D,KAAGyC,UAAH,CAAcD,IAAIE,MAAJ,CAAWC,cAAzB,EAAyCmB,SAAzC;AACE;AACA,IAAEjB,SAASL,IAAIE,MAAJ,CAAWG,OAAtB,EAA+Ba,QAAQlB,IAAIqB,IAAJ,CAASH,MAAhD,EAFF;AAGE;AACA;AACEK,UAAM;AACJlB,eAASL,IAAIqB,IAAJ,CAAShB,OADd;AAEJa,cAAQlB,IAAIqB,IAAJ,CAASH,MAFb;AAGJM,YAAMxB,IAAIqB,IAAJ,CAASG,IAHX;AAIJC,uBAAiBzB,IAAIqB,IAAJ,CAASI,eAJtB;AAKJC,gBAAU1B,IAAIqB,IAAJ,CAASK;AALf;AADR,GAJF;AAaE;AACArD,SAAO;AACL,QAAIA,GAAJ,EAAS;AACPhB,aAAO,2BAAP,EAAoCgB,GAApC;AACAsB,UAAIpB,IAAJ,CAAS,EAAEuB,SAAU,mCAAkCzB,GAAI,EAAlD,EAAT;AACA;AACD;AACDb,OACGyC,UADH,CACcD,IAAIE,MAAJ,CAAWC,cADzB,EAEGwB,OAFH,CAEW,EAAEtB,SAASL,IAAIE,MAAJ,CAAWG,OAAtB,EAA+Ba,QAAQlB,IAAIqB,IAAJ,CAASH,MAAhD,EAFX,EAGGjD,IAHH,CAGQ2D,YAAY;AAChBvE,aAAO,mBAAP,EAA4BuE,QAA5B;AACAjC,UAAIpB,IAAJ,CAASqD,QAAT;AACD,KANH;AAOD,GA3BH;AA6BD,CA/BD;;AAiCA;AACArE,IAAI6D,GAAJ,CAAQ,sBAAR,EAAgC,CAACpB,GAAD,EAAML,GAAN,KAAc;AAC5CtC,SAAO,MAAP,EAAe2C,IAAIqB,IAAnB;AACA,QAAM,EAAEG,IAAF,EAAQK,OAAR,EAAiBC,IAAjB,EAAuBC,IAAvB,EAA6BC,OAA7B,EAAsCC,WAAtC,KAAsDjC,IAAIqB,IAAhE;AACA7D,KAAGyC,UAAH,CAAcD,IAAIE,MAAJ,CAAWC,cAAzB,EAAyCmB,SAAzC;AACE;AACA;AACEO;AADF,GAFF;AAKE;AACA;AACEN,UAAM;AACJC,UADI;AAEJK,aAFI;AAGJC,UAHI;AAIJC,UAJI;AAKJC,aALI;AAMJC;AANI;AADR,GANF;AAgBE;AACA,IAAEC,QAAQ,IAAV,EAjBF;AAkBE;AACA7D,SAAO;AACL,QAAIA,GAAJ,EAAS;AACPhB,aAAO,oCAAP,EAA6CgB,GAA7C;AACAsB,UAAIpB,IAAJ,CAAS,EAAEuB,SAAU,wBAAuBzB,GAAI,EAAvC,EAAT;AACA;AACD;AACDb,OACGyC,UADH,CACcD,IAAIE,MAAJ,CAAWC,cADzB,EAEGwB,OAFH,CAEW,EAAEE,OAAF,EAFX,EAGG5D,IAHH,CAGQkE,iBAAiB;AACrB9E,aAAO,UAAP,EAAmB8E,aAAnB;AACAxC,UAAIpB,IAAJ,CAAS4D,aAAT;AACD,KANH;AAOD,GAhCH;AAkCD,CArCD;;AAuCA;AACA5E,IAAI6D,GAAJ,CAAQ,0BAAR,EAAoC,CAACpB,GAAD,EAAML,GAAN,KAAc;AAChDtC,SAAO,MAAP,EAAe2C,IAAIqB,IAAnB;AACA7D,KAAGyC,UAAH,CAAcD,IAAIE,MAAJ,CAAWC,cAAzB,EAAyCmB,SAAzC,CACE;AACEjB,aAASL,IAAIqB,IAAJ,CAAShB,OADpB;AAEEa,YAAQlB,IAAIqB,IAAJ,CAASH;AAFnB,GADF,EAKE;AACEK,UAAM;AACJlB,eAASL,IAAIqB,IAAJ,CAAShB,OADd;AAEJa,cAAQlB,IAAIqB,IAAJ,CAASH,MAFb;AAGJM,YAAMxB,IAAIqB,IAAJ,CAASG,IAHX;AAIJC,uBAAiBzB,IAAIqB,IAAJ,CAASI,eAJtB;AAKJC,gBAAU1B,IAAIqB,IAAJ,CAASK;AALf;AADR,GALF,EAcE,EAAEQ,QAAQ,IAAV,EAdF,EAeE7D,OAAO;AACL,QAAIA,GAAJ,EAAS;AACPhB,aAAO,yBAAP,EAAkCgB,GAAlC;AACAsB,UAAIpB,IAAJ,CAAS,EAAEuB,SAAU,2BAA0BzB,GAAI,EAA1C,EAAT;AACA;AACD;AACDb,OACGyC,UADH,CACcD,IAAIE,MAAJ,CAAWC,cADzB,EAEGwB,OAFH,CAEW,EAAEtB,SAASL,IAAIqB,IAAJ,CAAShB,OAApB,EAA6Ba,QAAQlB,IAAIqB,IAAJ,CAASH,MAA9C,EAFX,EAGGjD,IAHH,CAGQmE,oBAAoB;AACxB/E,aAAO,UAAP,EAAmB+E,gBAAnB;AACAzC,UAAIpB,IAAJ,CAAS6D,gBAAT;AACD,KANH;AAOD,GA5BH;AA8BD,CAhCD;;AAkCA;;;;AAIA;AACA;AACA;AACA;AACA7E,IAAI8E,GAAJ,CAAQ,uCAAR,EAAiD,CAACrC,GAAD,EAAML,GAAN,KAAc;AAC7DnC,KACGyC,UADH,CACcD,IAAIE,MAAJ,CAAWC,cADzB;AAEE;AAFF,GAGGwB,OAHH,CAGW,EAAEtB,SAASL,IAAIE,MAAJ,CAAWG,OAAtB,EAA+Ba,QAAQlB,IAAIE,MAAJ,CAAWgB,MAAlD,EAHX,EAIGjD,IAJH,CAIQ2D,YAAY;AAChBvE,WAAO,SAAP,EAAkBuE,QAAlB;AACAjC,QAAIpB,IAAJ,CAAS,EAAEqD,QAAF,EAAT;AACD,GAPH;AAQD,CATD;;AAWA;AACArE,IAAI8E,GAAJ,CAAQ,+BAAR,EAAyC,CAACrC,GAAD,EAAML,GAAN,KAAc;AACrD,MAAIK,IAAIE,MAAJ,CAAWC,cAAX,KAA8B,aAAlC,EAAiD;AAC/CW,gBAAYd,GAAZ,EAAiBL,GAAjB;AACD,GAFD,MAEO,IAAIK,IAAIE,MAAJ,CAAWC,cAAX,KAA8B,WAAlC,EAA+C;AACpDQ,sBAAkBX,GAAlB,EAAuBL,GAAvB;AACD;AACF,CAND;;AAQA;AACApC,IAAI8E,GAAJ,CAAQ,sBAAR,EAAgC,CAACrC,GAAD,EAAML,GAAN,KAAc;AAC5CnC,KACGyC,UADH,CACcD,IAAIE,MAAJ,CAAWC,cADzB,EAEGS,IAFH,GAGGC,OAHH,GAIG5C,IAJH,CAIQqE,UAAU;AACdjF,WAAO,yBAAP,EAAkCiF,MAAlC;AACA3C,QAAIpB,IAAJ,CAAS,EAAE+D,MAAF,EAAT;AACD,GAPH;AAQD,CATD;;AAWA/E,IAAI8E,GAAJ,CAAQ,MAAR,EAAgB,CAACrC,GAAD,EAAML,GAAN,KAAc;AAC5BA,MAAI4C,IAAJ,CAAS,+BAAT;AACD,CAFD;;AAIA;AACA;AACAhF,IAAI8E,GAAJ,CAAQ,GAAR,EAAa,CAACrC,GAAD,EAAML,GAAN,KAAc;AACzBA,MAAI6C,QAAJ,CAAapF,KAAKuB,IAAL,CAAUC,SAAV,EAAqB,IAArB,EAA4B,kBAA5B,CAAb;AACD,CAFD","file":"server.js","sourcesContent":["import 'babel-polyfill';\nimport express from 'express';\nimport bodyParser from 'body-parser';\nimport { MongoClient, ObjectId } from 'mongodb';\n\nconst jwt = require('express-jwt');\nconst jwks = require('jwks-rsa');\nconst cors = require('cors');\nconst path = require('path');\nconst logger = require('debug')('expressServer');\nrequire('dotenv').config();\n\nconst app = express();\nlet db;\nconst port = process.env.PORT || 3001;\n\nconst mongoUri = process.env.PROD\n  ? process.env.MLAB_URI\n  : 'mongodb://localhost/confriends';\n\nlogger('using the following DB URI: ', mongoUri);\nMongoClient.connect(mongoUri)\n  .then(connection => {\n    db = connection.db('confriends');\n    app.listen(port, () => logger(`running on port ${port}`));\n  })\n  .catch(err => logger('Error connecting to DB:', err));\n\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: true }));\napp.use(cors());\n\n// Serve static files from the React app\napp.use(express.static(path.join(__dirname, '..', 'build')));\n\n// eslint-disable-next-line no-unused-vars\nconst authCheck = jwt({\n  secret: jwks.expressJwtSecret({\n    cache: true,\n    rateLimit: true,\n    jwksRequestsPerMinute: 5,\n    // YOUR-AUTH0-DOMAIN name e.g prosper.auth0.com\n    jwksUri: `https://${process.env.AUTH0_DOMAIN}/.well-known/jwks.json`,\n  }),\n  // This is the identifier we set when we created the API\n  audience: `https://${process.env.AUTH0_AUDIENCE}`,\n  issuer: `https://${process.env.AUTH0_DOMAIN}/`,\n  algorithms: ['RS256'],\n});\n\n// helper function\n\nconst getMongoId = (idString, res) => {\n  // convert the id string to a MongoDB ObjectId\n  try {\n    return ObjectId(idString);\n  } catch (error) {\n    res.status(422).json({ message: `Invalid issue ID format: ${error}` });\n  }\n};\n\nconst deleteConferenceAttendees = (req, res) => {\n  db\n    .collection(req.params.collectionName)\n    .deleteMany({ eventId: req.params.eventId })\n    .then(attendees => {\n      logger('deleteConferenceAttendees');\n      res.json({ attendees });\n    })\n    .catch(err => {\n      logger('error deleting conference attendees: ', err);\n      res.json({ message: `Could not delete conference attendees: ${err}` });\n    });\n};\n\nconst deleteConference = (req, res) => {\n  const eventId = getMongoId(req.params.eventId);\n\n  db\n    .collection(req.params.collectionName)\n    .deleteOne({ _id: eventId })\n    .then(event => {\n      logger('deleteConference');\n      res.json({ event });\n    })\n    .catch(err => {\n      logger('Error deleting conference: ', err);\n      res.json({ message: `Could not delete conference: ${err}` });\n    });\n};\n\nconst getEventAttendees = (req, res) => {\n  const { params } = req;\n\n  db\n    .collection('attendees')\n    .find({\n      eventId: params.eventId,\n    })\n    .toArray()\n    .then(attendees => {\n      logger('getEventAttendees response: ', attendees);\n      res.json({ attendees });\n    })\n    .catch(err => {\n      logger('error getting event attendees: ', err);\n      res.json({ message: `Could not get event attendees: ${err}` });\n    });\n};\n\nconst getOneEvent = (req, res) => {\n  const { params } = req;\n\n  const eventId = getMongoId(params.eventId, res);\n\n  db\n    .collection(params.collectionName)\n    .find({ _id: eventId })\n    .limit(1)\n    .next()\n    .then(event => {\n      logger('getOneEvent response', event);\n      res.json({ event });\n    })\n    .catch(err => {\n      logger('error getting event: ', err);\n      res.json({ message: `Could not get event: ${err}` });\n    });\n};\n\n/**\n * Delete API\n */\n\n// delete an attendee\napp.delete('/api/:collectionName/:eventId/:userId', (req, res) => {\n  const { eventId, userId } = req.params;\n  db\n    .collection(req.params.collectionName)\n    .findOneAndDelete({ eventId, userId }, err => {\n      if (err) {\n        logger('error deleting attendee: ', err);\n        res.json({ message: `Could not delete attendee: ${err}` });\n        return;\n      }\n      getEventAttendees(req, res);\n      // db\n      //   .collection(req.params.collectionName)\n      //   .find({ eventId })\n      //   .toArray()\n      //   .then(attendees => {\n      //     logger('attendees after delete', attendees);\n      //     res.json({ attendees });\n      //   })\n      //   .catch(error => {\n      //     logger('error getting attendees after delete: ', error);\n      //     res.json({\n      //       message: `Could not get updated attendee list: ${error}`,\n      //     });\n      //   });\n    });\n});\n\n// delete a conference\napp.delete('/api/:collectionName/:eventId', (req, res) => {\n  if (req.params.collectionName === 'attendees') {\n    deleteConferenceAttendees(req, res);\n  } else if (req.params.collectionName === 'conferences') {\n    deleteConference(req, res);\n  }\n});\n\n/**\n * Create API\n */\n\n// updating an event's attendee with new approval info\napp.put('/api/:collectionName/:eventId/:userId', (req, res) => {\n  logger('body', req.body);\n  db.collection(req.params.collectionName).updateOne(\n    // filter\n    { eventId: req.params.eventId, userId: req.body.userId },\n    // info to update\n    {\n      $set: {\n        eventId: req.body.eventId,\n        userId: req.body.userId,\n        name: req.body.name,\n        procurementLink: req.body.procurementLink,\n        approved: req.body.approved,\n      },\n    },\n    // callback\n    err => {\n      if (err) {\n        logger('error updating attendee: ', err);\n        res.json({ message: `Could not update attendee info: ${err}` });\n        return;\n      }\n      db\n        .collection(req.params.collectionName)\n        .findOne({ eventId: req.params.eventId, userId: req.body.userId })\n        .then(attendee => {\n          logger('updatedAttendee: ', attendee);\n          res.json(attendee);\n        });\n    },\n  );\n});\n\n// adding event to collection\napp.put('/api/:collectionName', (req, res) => {\n  logger('body', req.body);\n  const { name, website, date, city, country, description } = req.body;\n  db.collection(req.params.collectionName).updateOne(\n    // filter\n    {\n      website,\n    },\n    // data to update\n    {\n      $set: {\n        name,\n        website,\n        date,\n        city,\n        country,\n        description,\n      },\n    },\n    // options\n    { upsert: true },\n    // callback\n    err => {\n      if (err) {\n        logger('error adding event to collection: ', err);\n        res.json({ message: `Could not add event: ${err}` });\n        return;\n      }\n      db\n        .collection(req.params.collectionName)\n        .findOne({ website })\n        .then(responseEvent => {\n          logger('response', responseEvent);\n          res.json(responseEvent);\n        });\n    },\n  );\n});\n\n// add attendee to event\napp.put('/api/:collectionName/:id', (req, res) => {\n  logger('body', req.body);\n  db.collection(req.params.collectionName).updateOne(\n    {\n      eventId: req.body.eventId,\n      userId: req.body.userId,\n    },\n    {\n      $set: {\n        eventId: req.body.eventId,\n        userId: req.body.userId,\n        name: req.body.name,\n        procurementLink: req.body.procurementLink,\n        approved: req.body.approved,\n      },\n    },\n    { upsert: true },\n    err => {\n      if (err) {\n        logger('Error adding attendee: ', err);\n        res.json({ message: `Could not add attendee: ${err}` });\n        return;\n      }\n      db\n        .collection(req.params.collectionName)\n        .findOne({ eventId: req.body.eventId, userId: req.body.userId })\n        .then(responseAttendee => {\n          logger('response', responseAttendee);\n          res.json(responseAttendee);\n        });\n    }\n  );\n});\n\n/**\n * Read API\n */\n\n// endpoint for edit attendee page\n// each event attendee has a unique\n// entry in the database so we have to\n// filter on eventId and userId\napp.get('/api/:collectionName/:eventId/:userId', (req, res) => {\n  db\n    .collection(req.params.collectionName)\n    // find the attendee to edit\n    .findOne({ eventId: req.params.eventId, userId: req.params.userId })\n    .then(attendee => {\n      logger('sending', attendee);\n      res.json({ attendee });\n    });\n});\n\n// endpoint for event detail page\napp.get('/api/:collectionName/:eventId', (req, res) => {\n  if (req.params.collectionName === 'conferences') {\n    getOneEvent(req, res);\n  } else if (req.params.collectionName === 'attendees') {\n    getEventAttendees(req, res);\n  }\n});\n\n// endpoint for a list of events\napp.get('/api/:collectionName', (req, res) => {\n  db\n    .collection(req.params.collectionName)\n    .find()\n    .toArray()\n    .then(events => {\n      logger('get all events response', events);\n      res.json({ events });\n    });\n});\n\napp.get('/api', (req, res) => {\n  res.send('Using the confriends REST API');\n});\n\n// The \"catchall\" handler: for any request that doesn't\n// match one above, send back React's index.html file.\napp.get('*', (req, res) => {\n  res.sendFile(path.join(__dirname, '..', `build/index.html`));\n});\n"]}