{"version":3,"sources":["../server/server.js"],"names":["jwt","require","jwks","cors","path","logger","config","app","db","connect","then","connection","listen","catch","err","use","json","urlencoded","extended","static","join","__dirname","authCheck","secret","expressJwtSecret","cache","rateLimit","jwksRequestsPerMinute","jwksUri","process","env","AUTH0_DOMAIN","audience","AUTH0_AUDIENCE","issuer","algorithms","getMongoId","idString","res","error","status","message","delete","req","body","eventId","userId","collection","params","collectionName","findOneAndDelete","find","toArray","attendees","put","updateOne","id","$set","name","procurementLink","approved","result","findOne","attendee","website","date","city","country","description","upsert","responseEvent","responseAttendee","get","getEventAttendees","getOneEvent","_id","limit","next","event","events","send","sendFile"],"mappings":"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","file":"server.js","sourcesContent":["import 'babel-polyfill';\nimport express from 'express';\nimport bodyParser from 'body-parser';\nimport { MongoClient, ObjectId } from 'mongodb';\n\nconst jwt = require('express-jwt');\nconst jwks = require('jwks-rsa');\nconst cors = require('cors');\nconst path = require('path');\nconst logger = require('debug')('expressServer');\nrequire('dotenv').config();\n\nconst app = express();\nlet db;\n\nMongoClient.connect('mongodb://localhost/confriends')\n  .then(connection => {\n    db = connection;\n    app.listen(3001, () => logger('running on port 3001'));\n  })\n  .catch(err => logger('ERROR:', err));\n\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: true }));\napp.use(cors());\n\n// Serve static files from the React app\napp.use(express.static(path.join(__dirname, '../client/build')));\n\n// eslint-disable-next-line no-unused-vars\nconst authCheck = jwt({\n  secret: jwks.expressJwtSecret({\n    cache: true,\n    rateLimit: true,\n    jwksRequestsPerMinute: 5,\n    // YOUR-AUTH0-DOMAIN name e.g prosper.auth0.com\n    jwksUri: `https://${process.env.AUTH0_DOMAIN}/.well-known/jwks.json`,\n  }),\n  // This is the identifier we set when we created the API\n  audience: `https://${process.env.AUTH0_AUDIENCE}`,\n  issuer: `https://${process.env.AUTH0_DOMAIN}/`,\n  algorithms: ['RS256'],\n});\n\n// helper function\n\nconst getMongoId = (idString, res) => {\n  // convert the id string to a MongoDB ObjectId\n  try {\n    return ObjectId(idString);\n  } catch (error) {\n    res.status(422).json({ message: `Invalid issue ID format: ${error}` });\n  }\n};\n\n// ** Delete API **\n/**\n * delete an attendee\n */\napp.delete('/api/:collectionName/delete', (req, res) => {\n  logger('body', req.body);\n  const { eventId, userId } = req.body;\n  db\n    .collection(req.params.collectionName)\n    .findOneAndDelete({ eventId, userId }, err => {\n      db\n        .collection(req.params.collectionName)\n        .find({ eventId })\n        .toArray()\n        .then(attendees => {\n          logger('attendees', attendees);\n          res.json({ attendees });\n        });\n    });\n});\n\n// ** Create API **\n\n/**\n * updating an event's attendee with new approval info\n */\napp.put('/api/:collectionName/:id/edit/:userId', (req, res) => {\n  logger('body', req.body);\n  db.collection(req.params.collectionName).updateOne(\n    { eventId: req.params.id, userId: req.body.userId },\n    {\n      $set: {\n        eventId: req.body.eventId,\n        userId: req.body.userId,\n        name: req.body.name,\n        procurementLink: req.body.procurementLink,\n        approved: req.body.approved,\n      },\n    },\n    result => {\n      db\n        .collection(req.params.collectionName)\n        .findOne({ eventId: req.params.id, userId: req.body.userId })\n        .then(attendee => {\n          logger('updatedAttendee: ', attendee);\n          res.json(attendee);\n        });\n    }\n  );\n});\n\n/**\n * adding event to collection\n */\napp.put('/api/:collectionName', (req, res) => {\n  logger('body', req.body);\n  const { name, website, date, city, country, description } = req.body;\n  db.collection(req.params.collectionName).updateOne(\n    {\n      website,\n    },\n    {\n      name,\n      website,\n      date,\n      city,\n      country,\n      description,\n    },\n    { upsert: true },\n    err => {\n      db\n        .collection(req.params.collectionName)\n        .findOne({ website })\n        .then(responseEvent => {\n          logger('response', responseEvent);\n          res.json(responseEvent);\n        });\n    }\n  );\n});\n\n/**\n * updating attendee collection\n */\napp.put('/api/:collectionName/:id', (req, res) => {\n  logger('body', req.body);\n  db.collection(req.params.collectionName).updateOne(\n    {\n      eventId: req.body.eventId,\n      userId: req.body.userId,\n    },\n    {\n      eventId: req.body.eventId,\n      userId: req.body.userId,\n      name: req.body.name,\n      procurementLink: req.body.procurementLink,\n      approved: req.body.approved,\n    },\n    { upsert: true },\n    err => {\n      db\n        .collection(req.params.collectionName)\n        .findOne({ eventId: req.body.eventId, userId: req.body.userId })\n        .then(responseAttendee => {\n          logger('response', responseAttendee);\n          res.json(responseAttendee);\n        });\n    }\n  );\n});\n\n// ** Read API **\n\n/**\n * endpoint for edit attendee page\n * each event attendee has a unique\n * entry in the database so we have to\n * filter on eventId and userId\n */\napp.get('/api/:collectionName/:eventId/:userId', (req, res) => {\n  db\n    .collection(req.params.collectionName)\n    // find the attendee to edit\n    .findOne({ eventId: req.params.eventId, userId: req.params.userId })\n    .then(attendee => {\n      logger('sending', attendee);\n      res.json({ attendee });\n    });\n});\n\nconst getEventAttendees = (req, res) => {\n  const { params } = req;\n\n  db\n    .collection('attendees')\n    .find({\n      eventId: params.id,\n    })\n    .toArray()\n    .then(attendees => {\n      logger('getEventAttendees response', attendees);\n      res.json({ attendees });\n    });\n};\n\nconst getOneEvent = (req, res) => {\n  const { params } = req;\n\n  const eventId = getMongoId(params.id, res);\n\n  db\n    .collection(params.collectionName)\n    .find({ _id: eventId })\n    .limit(1)\n    .next()\n    .then(event => {\n      logger('getOneEvent response', event);\n      res.json({ event });\n    });\n};\n\n/**\n * endpoint for event detail page\n */\napp.get('/api/:collectionName/:id', (req, res) => {\n  if (req.params.collectionName === 'conferences') {\n    getOneEvent(req, res);\n  } else if (req.params.collectionName === 'attendees') {\n    getEventAttendees(req, res);\n  }\n});\n\n/**\n * endpoint for a list of events\n */\napp.get('/api/:collectionName', (req, res) => {\n  db\n    .collection(req.params.collectionName)\n    .find()\n    .toArray()\n    .then(events => {\n      res.json({ events });\n    });\n});\n\napp.get('/api', (req, res) => {\n  res.send('Using the confriends REST API');\n});\n\n// The \"catchall\" handler: for any request that doesn't\n// match one above, send back React's index.html file.\napp.get('*', (req, res) => {\n  res.sendFile(path.join(`${__dirname}../client/build/index.html`));\n});\n"]}