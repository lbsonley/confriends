{"version":3,"sources":["../server/server.js"],"names":["jwt","require","jwks","cors","path","logger","config","app","db","connect","then","connection","listen","catch","err","use","json","urlencoded","extended","static","join","__dirname","authCheck","secret","expressJwtSecret","cache","rateLimit","jwksRequestsPerMinute","jwksUri","process","env","AUTH0_DOMAIN","audience","AUTH0_AUDIENCE","issuer","algorithms","get","req","res","issueId","params","id","error","status","message","collection","collectionName","find","_id","limit","next","event","toArray","events","send","sendFile"],"mappings":";;AAAA;;AACA;;;;AACA;;;;AACA;;;;AAEA,MAAMA,MAAMC,QAAQ,aAAR,CAAZ;AACA,MAAMC,OAAOD,QAAQ,UAAR,CAAb;AACA,MAAME,OAAOF,QAAQ,MAAR,CAAb;AACA,MAAMG,OAAOH,QAAQ,MAAR,CAAb;AACA,MAAMI,SAASJ,QAAQ,OAAR,EAAiB,eAAjB,CAAf;AACAA,QAAQ,QAAR,EAAkBK,MAAlB;;AAEA,MAAMC,MAAM,wBAAZ;AACA,IAAIC,EAAJ;;AAEA,qBAAYC,OAAZ,CAAoB,4BAApB,EACGC,IADH,CACQC,cAAc;AAClBH,OAAKG,UAAL;AACAJ,MAAIK,MAAJ,CAAW,IAAX,EAAiB,MAAMP,OAAO,sBAAP,CAAvB;AACD,CAJH,EAKGQ,KALH,CAKSC,OAAOT,OAAO,QAAP,EAAiBS,GAAjB,CALhB;;AAOAP,IAAIQ,GAAJ,CAAQ,qBAAWC,IAAX,EAAR;AACAT,IAAIQ,GAAJ,CAAQ,qBAAWE,UAAX,CAAsB,EAAEC,UAAU,IAAZ,EAAtB,CAAR;AACAX,IAAIQ,GAAJ,CAAQZ,MAAR;;AAEA;AACAI,IAAIQ,GAAJ,CAAQ,kBAAQI,MAAR,CAAef,KAAKgB,IAAL,CAAUC,SAAV,EAAqB,iBAArB,CAAf,CAAR;;AAEA;AACA,MAAMC,YAAYtB,IAAI;AACpBuB,UAAQrB,KAAKsB,gBAAL,CAAsB;AAC5BC,WAAO,IADqB;AAE5BC,eAAW,IAFiB;AAG5BC,2BAAuB,CAHK;AAI5B;AACAC,aAAU,WAAUC,QAAQC,GAAR,CAAYC,YAAa;AALjB,GAAtB,CADY;AAQpB;AACAC,YAAW,WAAUH,QAAQC,GAAR,CAAYG,cAAe,EAT5B;AAUpBC,UAAS,WAAUL,QAAQC,GAAR,CAAYC,YAAa,GAVxB;AAWpBI,cAAY,CAAC,OAAD;AAXQ,CAAJ,CAAlB;;AAcA;;;AAGA5B,IAAI6B,GAAJ,CAAQ,0BAAR,EAAoC,CAACC,GAAD,EAAMC,GAAN,KAAc;AAChD,MAAIC,OAAJ;;AAEA;AACA,MAAI;AACFA,cAAU,uBAASF,IAAIG,MAAJ,CAAWC,EAApB,CAAV;AACD,GAFD,CAEE,OAAOC,KAAP,EAAc;AACdJ,QAAIK,MAAJ,CAAW,GAAX,EAAgB3B,IAAhB,CAAqB,EAAE4B,SAAU,4BAA2BF,KAAM,EAA7C,EAArB;AACA;AACD;;AAEDlC,KACGqC,UADH,CACcR,IAAIG,MAAJ,CAAWM,cADzB,EAEGC,IAFH,CAEQ,EAAEC,KAAKT,OAAP,EAFR,EAGGU,KAHH,CAGS,CAHT,EAIGC,IAJH,GAKGxC,IALH,CAKQyC,SAAS;AACbb,QAAItB,IAAJ,CAAS,EAAEmC,KAAF,EAAT;AACD,GAPH;AAQD,CAnBD;;AAqBA5C,IAAI6B,GAAJ,CAAQ,sBAAR,EAAgC,CAACC,GAAD,EAAMC,GAAN,KAAc;AAC5C9B,KACGqC,UADH,CACcR,IAAIG,MAAJ,CAAWM,cADzB,EAEGC,IAFH,GAGGK,OAHH,GAIG1C,IAJH,CAIQ2C,UAAU;AACdf,QAAItB,IAAJ,CAAS,EAAEqC,MAAF,EAAT;AACD,GANH;AAOD,CARD;;AAUA9C,IAAI6B,GAAJ,CAAQ,MAAR,EAAgB,CAACC,GAAD,EAAMC,GAAN,KAAc;AAC5BA,MAAIgB,IAAJ,CAAS,+BAAT;AACD,CAFD;;AAIA;AACA;AACA/C,IAAI6B,GAAJ,CAAQ,GAAR,EAAa,CAACC,GAAD,EAAMC,GAAN,KAAc;AACzBA,MAAIiB,QAAJ,CAAanD,KAAKgB,IAAL,CAAW,GAAEC,SAAU,4BAAvB,CAAb;AACD,CAFD","file":"server.js","sourcesContent":["import 'babel-polyfill';\nimport express from 'express';\nimport bodyParser from 'body-parser';\nimport { MongoClient, ObjectId } from 'mongodb';\n\nconst jwt = require('express-jwt');\nconst jwks = require('jwks-rsa');\nconst cors = require('cors');\nconst path = require('path');\nconst logger = require('debug')('expressServer');\nrequire('dotenv').config();\n\nconst app = express();\nlet db;\n\nMongoClient.connect('mongodb://localhost/events')\n  .then(connection => {\n    db = connection;\n    app.listen(3001, () => logger('running on port 3001'));\n  })\n  .catch(err => logger('ERROR:', err));\n\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: true }));\napp.use(cors());\n\n// Serve static files from the React app\napp.use(express.static(path.join(__dirname, '../client/build')));\n\n// eslint-disable-next-line no-unused-vars\nconst authCheck = jwt({\n  secret: jwks.expressJwtSecret({\n    cache: true,\n    rateLimit: true,\n    jwksRequestsPerMinute: 5,\n    // YOUR-AUTH0-DOMAIN name e.g prosper.auth0.com\n    jwksUri: `https://${process.env.AUTH0_DOMAIN}/.well-known/jwks.json`,\n  }),\n  // This is the identifier we set when we created the API\n  audience: `https://${process.env.AUTH0_AUDIENCE}`,\n  issuer: `https://${process.env.AUTH0_DOMAIN}/`,\n  algorithms: ['RS256'],\n});\n\n/**\n * endpoint for event detail page\n */\napp.get('/api/:collectionName/:id', (req, res) => {\n  let issueId;\n\n  // convert the id string to a MongoDB ObjectId\n  try {\n    issueId = ObjectId(req.params.id);\n  } catch (error) {\n    res.status(422).json({ message: `Invalid issue ID format: ${error}` });\n    return;\n  }\n\n  db\n    .collection(req.params.collectionName)\n    .find({ _id: issueId })\n    .limit(1)\n    .next()\n    .then(event => {\n      res.json({ event });\n    });\n});\n\napp.get('/api/:collectionName', (req, res) => {\n  db\n    .collection(req.params.collectionName)\n    .find()\n    .toArray()\n    .then(events => {\n      res.json({ events });\n    });\n});\n\napp.get('/api', (req, res) => {\n  res.send('Using the confriends REST API');\n});\n\n// The \"catchall\" handler: for any request that doesn't\n// match one above, send back React's index.html file.\napp.get('*', (req, res) => {\n  res.sendFile(path.join(`${__dirname}../client/build/index.html`));\n});\n"]}